package com.example.javaapp.Controller;

import com.example.javaapp.DAO.FitnessGoalDAO;
import com.example.javaapp.SceneManager;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.scene.control.*;
import javafx.scene.layout.HBox;
import javafx.scene.layout.VBox;
import com.example.javaapp.Model.FitnessGoal;

import javax.swing.*;
import java.awt.event.MouseEvent;
import java.io.BufferedReader;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;

public class FitnessGoalController {
    @FXML
    private TextField goalDescriptionField;
    @FXML
    private DatePicker completionDatePicker;
    @FXML
    private VBox goalsContainer;
    @FXML
    private Button returnButton;
    @FXML
    private Button deleteGoal;


    private int goalCount = 1;


    private FitnessGoalDAO goalDAO = new FitnessGoalDAO();
    private ObservableList<FitnessGoal> goals = FXCollections.observableArrayList();


    @FXML
    public void initialize() {
        try {
            List<FitnessGoal> loadedGoals = goalDAO.loadGoals();
            goals.addAll(loadedGoals);
            displayGoals();
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    @FXML
    public void addGoal() {
        String description = goalDescriptionField.getText();
        String completionDate = completionDatePicker.getValue() != null
                ? completionDatePicker.getValue().toString()
                : "";


        if (description.isEmpty() || completionDate.isEmpty()) {
            showAlert("Error", "Please fill in all fields.");
            return;
        }

        FitnessGoal newGoal = new FitnessGoal(goals.size() + 1, description, completionDate, "Incomplete");
        goals.add(newGoal);

        try {
            goalDAO.saveGoals(goals);
        } catch (IOException e) {
            e.printStackTrace();
        }

        displayGoals();
        goalDescriptionField.clear();
        completionDatePicker.setValue(null);
    }


    private void displayGoals() {
        goalsContainer.getChildren().clear();

        for (FitnessGoal goal : goals) {
            VBox goalBox = new VBox();
            goalBox.setStyle("-fx-padding: 10; -fx-background-color: #f0f0f0; -fx-border-color: #ccc;");
            goalBox.setSpacing(5);

            Label goalLabel = new Label("Goal " + goal.getGoalId() + ": " + goal.getDescription());
            Label statusLabel = new Label("Status: " + goal.getStatus());
            Label dateLabel = new Label("Complete By: " + goal.getCompletionDate());

            goalBox.getChildren().addAll(goalLabel, statusLabel, dateLabel);

            // Add click event to mark the goal for deletion
            goalBox.setOnMouseClicked(event -> {
                if (goalBox.getStyle().contains("yellow")) {
                    // Unselect if already selected
                    goalBox.setStyle("-fx-padding: 10; -fx-background-color: #f0f0f0; -fx-border-color: #ccc;");
                    goalBox.setUserData(null);
                } else {
                    // Highlight selected goal
                    goalBox.setStyle("-fx-padding: 10; -fx-background-color: yellow; -fx-border-color: #ccc;");
                    goalBox.setUserData(goal);
                }
            });

            goalsContainer.getChildren().add(goalBox);
        }
    }
    @FXML
    public void deleteGoal() {
        // Find all selected goals
        List<VBox> selectedGoalBoxes = goalsContainer.getChildren().stream()
                .filter(node -> node instanceof VBox)
                .map(node -> (VBox) node)
                .filter(vbox -> vbox.getUserData() != null)
                .collect(Collectors.toList());

        if (selectedGoalBoxes.isEmpty()) {
            showAlert("Error", "No goals selected to delete.");
            return;
        }

        // Remove selected goals from the list
        for (VBox goalBox : selectedGoalBoxes) {
            FitnessGoal goalToDelete = (FitnessGoal) goalBox.getUserData();
            goals.remove(goalToDelete);
        }

        try {
            goalDAO.saveGoals(goals);
        } catch (IOException e) {
            e.printStackTrace();
        }

        // Refresh the UI
        displayGoals();
    }

    private void showAlert(String title, String message) {
        Alert alert = new Alert(Alert.AlertType.ERROR);
        alert.setTitle(title);
        alert.setHeaderText(null);
        alert.setContentText(message);
        alert.showAndWait();
    }

    @FXML
    private void onClickReturn() {
        SceneManager.loadScene("Home.fxml");
    }


    public void onGoalsDetails() {
        String userInput = goalDescriptionField.getText();
        if (userInput.isEmpty()) {
            return;
        }
        goalCount++;
        HBox goalDetails = new HBox();
        Label goalLabel = new Label("goal" + goalCount);
        goalDetails.setStyle("-fx-background-color: AA79D3; -fx-background-radius: 50; -fx-padding: 10;");
        goalLabel.setStyle("-fx-background-color: AA79D3; -fx-background-radius: 50; -fx-padding: 10;");

        Label displaygoals = new Label(userInput);
        displaygoals.setStyle("-fx-font-family: 'Arial Round MT'; -fx-font-size: 30px; -fx-text-fill: white; ");
        goalDetails.getChildren().add(displaygoals);
        goalDescriptionField.clear();
        goalsContainer.getChildren().add(goalLabel);
        goalsContainer.getChildren().add(goalDetails);
    }
}
